services:
  postgres:
    container_name: postgres
    image: postgres:16.2
    restart: unless-stopped
    hostname: ${POSTGRES_HOST}
    ports:
      - "${POSTGRES_PORT_EXTERNAL}:${POSTGRES_PORT_INTERNAL}"
    volumes:
      - "../data/postgres:/var/lib/postgresql/data"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT_INTERNAL}
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}" ]
      interval: 15s
      timeout: 5s
      retries: 3

  test_service:
    container_name: test_service
    hostname: ${TEST_SERVICE_HOST}
    restart: on-failure
    build:
      context: ../
      dockerfile: docker/backend/test_service/Dockerfile
    ports:
      - "${TEST_SERVICE_HTTP_PORT_EXTERNAL}:${TEST_SERVICE_HTTP_PORT_INTERNAL}"
    command: >
      sh -c "poetry run alembic upgrade head && poetry run gunicorn --bind 0.0.0.0:$TEST_SERVICE_HTTP_PORT_INTERNAL --workers 4 --worker-class uvicorn.workers.UvicornWorker --timeout 120 --graceful-timeout 60 --log-level info --preload main:app"
    environment:
      ## POSTGRES
      POSTGRES_URL_ASYNC: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT_INTERNAL}/${POSTGRES_DB}?ssl=disable
    depends_on:
      postgres:
        condition: service_healthy